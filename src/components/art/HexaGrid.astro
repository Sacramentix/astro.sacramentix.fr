---
import { Icon } from 'astro-icon';


export interface Props {
    stacks: Stack[]
}

type StackIcon = {
    link: string,
    name: string,
    icon: string,
}
type StackImg = {
    link: string,
    name: string,
    img: string,
    alt: string
}
type Stack = StackIcon | StackImg;

const { stacks } = Astro.props as Props;

---

<style is:global lang="scss">
[hexa-grid] {
    display: grid;
    //hex-cells
    --n: 6; /* per line */
    --s: 150px; /* size */
    --r: 1.15; /* ratio */
    /* clip-path */
    --h: 0.5;  
    --v: 0.25; 
    --hc: calc(clamp(0,var(--h),0.5) * var(--s)) ;
    --vc: calc(clamp(0,var(--v),0.5) * var(--s) * var(--r)); 

    /*margin */
    --mv: 10px; /* vertical */
    --mh: calc(var(--mv) + (var(--s) - 2*var(--hc))/2); /* horizontal */
    /* for the float*/
    --f: calc(2*var(--s)*var(--r) + 4*var(--mv)  - 2*var(--vc) - 2px);
    [astro-icon] {
        height: 3em;
    }
}
[hexa-container] {
    grid-column: 1/-1;
    max-width: calc(var(--n)*var(--s) + var(--n)*var(--mv)*2);
    margin:0 auto;
    font-size: 0; /*disable white space between inline block element */
    position:relative;
    padding-bottom: calc(var(--s) * 1.33333333);
    > a {
        text-decoration: none;
        color: #ddd;
        width: var(--s);
        margin: var(--mv) var(--mh);
        height: calc(var(--s)*var(--r)); 
        display: inline-grid;
        place-items: center;
        font-size:initial;
        background: #333;
        clip-path: polygon(var(--hc) 0, calc(100% - var(--hc)) 0,100% var(--vc),100% calc(100% - var(--vc)), calc(100% - var(--hc)) 100%,var(--hc) 100%,0 calc(100% - var(--vc)),0 var(--vc));
        margin-bottom: calc(var(--mv) - var(--vc));
        perspective: var(--s);
        transition: .2s all ease-in-out;
        > p {
            align-self: flex-start;
            margin: 0;
        }
        > [astro-icon] {
            transition: .2s all ease-in-out;
            filter: drop-shadow(0 0 5px #000d);
        }
        &:is(:hover, :focus) {
            filter: saturate(1.75) brightness(1.2);
            --z: 20px;
            > [astro-icon] {
                filter: drop-shadow(-6px -6px 5px #000a);
                transform: translate3d(0, 10px, var(--z)) rotate3d(0, 0, 1, 20deg);
            }
        }
        &:nth-child(2n) {
            &:is(:hover, :focus) {
                > [astro-icon] {
                    transform: translate3d(0, 10px, var(--z)) rotate3d(0, 0, -1, 20deg);
                }
            }
        }
    }
    &::before {
        content: "";
        width: calc(var(--s)/2 + var(--mh));
        float: left;
        height: 135%;
        shape-outside: repeating-linear-gradient( 
                        transparent 0 calc(var(--f) - 2px),      
                        #fff        0 var(--f));
    }
}
</style>

<div hexa-grid>
    <div hexa-container>
        { stacks.map((s:any) => (
        <a target="_blank" href={s.link}>
            { s.icon != undefined ?
                <Icon name={s.icon}/>
                <p>{s.name}</p> :
                <img src={s.img} alt={s.alt} width="32" height="32" astro-icon/>
                <p>{s.name}</p>
            }
        </a>
        ))}
    </div>
</div>